from datetime import datetime, timedelta
from collections import defaultdict
from loader import db_api

def get_recent_transactions(user_id: int, limit: int = 10):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    return db_api.transactions().get_last(user_id, limit)

def get_summary_by_category(user_id: int, ttype: str, days: int = 30):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π.
    """
    since = (datetime.now() - timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")
    transactions = db_api.transactions().get_by_type_since(user_id, ttype, since)

    summary = defaultdict(float)
    for tr in transactions:
        summary[tr.category] += tr.amount
    return dict(summary)

def build_text_report(user_id: int, days: int = 30) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –ø–æ –¥–æ—Ö–æ–¥–∞–º –∏ —Ä–∞—Å—Ö–æ–¥–∞–º.
    """
    income_summary = get_summary_by_category(user_id, "income", days)
    expense_summary = get_summary_by_category(user_id, "expense", days)

    text = f"üìä –û—Ç—á—ë—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π\n\n"

    text += "‚ûï –î–æ—Ö–æ–¥—ã:\n"
    if income_summary:
        for cat, amount in income_summary.items():
            text += f"  ‚Ä¢ {cat}: {amount:.2f} —Ä—É–±\n"
    else:
        text += "  (–Ω–µ—Ç –¥–æ—Ö–æ–¥–æ–≤)\n"

    text += "\n‚ûñ –†–∞—Å—Ö–æ–¥—ã:\n"
    if expense_summary:
        for cat, amount in expense_summary.items():
            text += f"  ‚Ä¢ {cat}: {amount:.2f} —Ä—É–±\n"
    else:
        text += "  (–Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤)\n"

    total_income = sum(income_summary.values())
    total_expense = sum(expense_summary.values())
    balance = total_income - total_expense

    text += f"\nüíº –ë–∞–ª–∞–Ω—Å: {balance:.2f} —Ä—É–±"
    return text
