from telebot.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from loader import bot, db_api
# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö —Å—É–º–º –¥–æ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
income_amounts = {}  # user_id -> —Å—É–º–º–∞

@bot.message_handler(func=lambda msg: msg.text == "1. –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥ ‚ôªÔ∏è")
def handle_income_start(msg: Message):
    bot.send_message(msg.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:")
    bot.register_next_step_handler(msg, receive_income_amount)

def receive_income_amount(msg: Message):
    user_id = msg.from_user.id
    try:
        amount = float(msg.text.strip())
        income_amounts[user_id] = amount
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton("–ó–∞—Ä–ø–ª–∞—Ç–∞ üíµ", callback_data="income_salary"), # TODO - –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –¥–æ—Ö–æ–¥–∞
            InlineKeyboardButton("–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞ ‚õèÔ∏è", callback_data="income_freelance")
        )
        bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:", reply_markup=markup)
    except ValueError:
        bot.send_message(msg.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15000.00).")
        bot.register_next_step_handler(msg, receive_income_amount)

@bot.callback_query_handler(func=lambda call: call.data in ["income_salary", "income_freelance"])
def handle_income_category(call: CallbackQuery):
    user_id = call.from_user.id
    amount = income_amounts.get(user_id)
    if amount is None:
        bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞.")
        return

    category = "–ó–∞—Ä–ø–ª–∞—Ç–∞" if call.data == "income_salary" else "–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    #TODO - –ø—Ä–æ–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –≤—ã–∑–æ–≤—ã —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤—ã—Ö –Ω–µ—Ç
    # –¥–æ–±–∏–∞–≤–∏—Ç—å –∏–ª–∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–∫–æ–≤—É—é
    db_api.transactions().add_transaction(
        user_id=user_id,
        amount=amount,
        category=category,
        ttype="income"
    )

    bot.send_message(
        call.message.chat.id,
        f"–î–æ—Ö–æ–¥ <b>{amount:.2f} —Ä—É–±</b> –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category}</b> –¥–æ–±–∞–≤–ª–µ–Ω.",
        parse_mode="html"
    )

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    del income_amounts[user_id]

@bot.callback_query_handler(func=lambda call: True)
def answer(call:CallbackQuery):
    if call.data == 'A':
        wallets = db_api.wallets().get_wallets_by_user_id(call.from_user.id)
        str = ""
        for wallet in wallets:
            str += wallet.name + " " + wallet.currency + " " + wallet.value.__str__() + "\n"

        markup = Keybords.time_period()

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                                  text='–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –¥–ª—è –≤–∞—Å –ø–µ—Ä–∏–æ–¥' + str, reply_markup=markup)
    elif call.data == 'currency_account_selection':
        markup = Keybords.currency_account_selection()
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                              text='–í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω—ã–π —Å—á–µ—Ç:',reply_markup=markup)


    elif call.data == 'entering amount RUB':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                              text='–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')
        bot.register_next_step_handler(call.message,add_db)